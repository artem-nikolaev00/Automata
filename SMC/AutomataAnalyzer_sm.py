# ex: set ro:
# DO NOT EDIT.
# generated by smc (http://smc.sourceforge.net/)
# from file : AutomataAnalyzer.sm

from SMC import statemap


class AutomataAnalyzerState(statemap.State):

    def Entry(self, fsm):
        pass

    def Exit(self, fsm):
        pass

    def Alpha(self, fsm, ch):
        self.Default(fsm)

    def Alpha(self, fsm, ch):
        self.Default(fsm)

    def Colon(self, fsm, ch):
        self.Default(fsm)

    def Colon(self, fsm, ch):
        self.Default(fsm)

    def Digit(self, fsm, ch):
        self.Default(fsm)

    def Digit(self, fsm, ch):
        self.Default(fsm)

    def Disk(self, fsm):
        self.Default(fsm)

    def EOS(self, fsm):
        self.Default(fsm)

    def Endl(self, fsm):
        self.Default(fsm)

    def Point(self, fsm, ch):
        self.Default(fsm)

    def Point(self, fsm, ch):
        self.Default(fsm)

    def Slash(self, fsm, ch):
        self.Default(fsm)

    def Slash(self, fsm, ch):
        self.Default(fsm)

    def Unknown(self, fsm):
        self.Default(fsm)

    def UpperLiter(self, fsm, ch):
        self.Default(fsm)

    def UpperLiter(self, fsm, ch):
        self.Default(fsm)

    def Default(self, fsm):
        msg = "\n\tState: %s\n\tTransition: %s" % (
            fsm.getState().getName(), fsm.getTransition())
        raise statemap.TransitionUndefinedException(msg)

class Map_Default(AutomataAnalyzerState):

    def UpperLiter(self, fsm, ch):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map.Error)
            fsm.getState().Entry(fsm)


    def Alpha(self, fsm, ch):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map.Error)
            fsm.getState().Entry(fsm)


    def Digit(self, fsm, ch):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map.Error)
            fsm.getState().Entry(fsm)


    def Colon(self, fsm, ch):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map.Error)
            fsm.getState().Entry(fsm)


    def Point(self, fsm, ch):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map.Error)
            fsm.getState().Entry(fsm)


    def Slash(self, fsm, ch):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map.Error)
            fsm.getState().Entry(fsm)


    def Endl(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map.Error)
            fsm.getState().Entry(fsm)


    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map.Error)
            fsm.getState().Entry(fsm)


    def Disk(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.ClearSMC()
        finally:
            fsm.setState(Map.Disk)
            fsm.getState().Entry(fsm)


    def Unknown(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(Map.Error)
            fsm.getState().Entry(fsm)


class Map_Disk(Map_Default):

    def UpperLiter(self, fsm, ch):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Add_str(ch)
        finally:
            fsm.setState(Map.colon)
            fsm.getState().Entry(fsm)


class Map_colon(Map_Default):

    def Colon(self, fsm, ch):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Add_str(ch)
        finally:
            fsm.setState(Map.slash)
            fsm.getState().Entry(fsm)


class Map_slash(Map_Default):

    def Slash(self, fsm, ch):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Add_str(ch)
        finally:
            fsm.setState(Map.way)
            fsm.getState().Entry(fsm)


class Map_way(Map_Default):

    def Alpha(self, fsm, ch):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.CounterInc()
            ctxt.Add_str(ch)
        finally:
            fsm.setState(Map.catalog)
            fsm.getState().Entry(fsm)


    def Digit(self, fsm, ch):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.CounterInc()
            ctxt.Add_str(ch)
        finally:
            fsm.setState(Map.catalog)
            fsm.getState().Entry(fsm)


    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.set_name()
        finally:
            fsm.setState(Map.OK)
            fsm.getState().Entry(fsm)


    def Endl(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.set_name()
        finally:
            fsm.setState(Map.OK)
            fsm.getState().Entry(fsm)


    def Point(self, fsm, ch):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.set_name()
            ctxt.CounterZero()
            ctxt.Add_name(ch)
            ctxt.clearSubstring()
        finally:
            fsm.setState(Map.point)
            fsm.getState().Entry(fsm)


    def UpperLiter(self, fsm, ch):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.CounterInc()
            ctxt.Add_str(ch)
        finally:
            fsm.setState(Map.catalog)
            fsm.getState().Entry(fsm)


class Map_catalog(Map_Default):

    def Alpha(self, fsm, ch):
        ctxt = fsm.getOwner()
        if  ctxt.isValidName()  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.CounterInc()
                ctxt.Add_str(ch)
            finally:
                fsm.setState(Map.catalog)
                fsm.getState().Entry(fsm)
        else:
            Map_Default.Alpha(self, fsm, ch)
        
    def Digit(self, fsm, ch):
        ctxt = fsm.getOwner()
        if  ctxt.isValidName()  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.CounterInc()
                ctxt.Add_str(ch)
            finally:
                fsm.setState(Map.catalog)
                fsm.getState().Entry(fsm)
        else:
            Map_Default.Digit(self, fsm, ch)
        
    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.set_name()
        finally:
            fsm.setState(Map.OK)
            fsm.getState().Entry(fsm)


    def Endl(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.set_name()
        finally:
            fsm.setState(Map.OK)
            fsm.getState().Entry(fsm)


    def Point(self, fsm, ch):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.set_name()
            ctxt.CounterZero()
            ctxt.Add_name(ch)
            ctxt.clearSubstring()
        finally:
            fsm.setState(Map.point)
            fsm.getState().Entry(fsm)


    def Slash(self, fsm, ch):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.set_name()
            ctxt.CounterZero()
            ctxt.Add_name(ch)
            ctxt.clearSubstring()
        finally:
            fsm.setState(Map.way)
            fsm.getState().Entry(fsm)


    def UpperLiter(self, fsm, ch):
        ctxt = fsm.getOwner()
        if  ctxt.isValidName()  :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.CounterInc()
                ctxt.Add_str(ch)
            finally:
                fsm.setState(Map.catalog)
                fsm.getState().Entry(fsm)
        else:
            Map_Default.UpperLiter(self, fsm, ch)
        
class Map_point(Map_Default):

    def Alpha(self, fsm, ch):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.CounterInc()
            ctxt.Add_type(ch)
        finally:
            fsm.setState(Map.file_name)
            fsm.getState().Entry(fsm)


    def UpperLiter(self, fsm, ch):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.CounterInc()
            ctxt.Add_type(ch)
        finally:
            fsm.setState(Map.file_name)
            fsm.getState().Entry(fsm)


class Map_file_name(Map_Default):

    def Alpha(self, fsm, ch):
        ctxt = fsm.getOwner()
        if ctxt.isValidType() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.CounterInc()
                ctxt.Add_type(ch)
            finally:
                fsm.setState(Map.file_name)
                fsm.getState().Entry(fsm)
        else:
            Map_Default.Alpha(self, fsm, ch)
        
    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.set_type()
        finally:
            fsm.setState(Map.OK)
            fsm.getState().Entry(fsm)


    def Endl(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.set_type()
        finally:
            fsm.setState(Map.OK)
            fsm.getState().Entry(fsm)


    def UpperLiter(self, fsm, ch):
        ctxt = fsm.getOwner()
        if ctxt.isValidType() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.CounterInc()
                ctxt.Add_type(ch)
            finally:
                fsm.setState(Map.file_name)
                fsm.getState().Entry(fsm)
        else:
            Map_Default.UpperLiter(self, fsm, ch)
        
class Map_OK(Map_Default):

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Acceptable()
        finally:
            fsm.setState(Map.OK)
            fsm.getState().Entry(fsm)


class Map_Error(Map_Default):

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(endState)


class Map(object):

    Disk = Map_Disk('Map.Disk', 0)
    colon = Map_colon('Map.colon', 1)
    slash = Map_slash('Map.slash', 2)
    way = Map_way('Map.way', 3)
    catalog = Map_catalog('Map.catalog', 4)
    point = Map_point('Map.point', 5)
    file_name = Map_file_name('Map.file_name', 6)
    OK = Map_OK('Map.OK', 7)
    Error = Map_Error('Map.Error', 8)
    Default = Map_Default('Map.Default', -1)

class AutomataAnalyzer_sm(statemap.FSMContext):

    def __init__(self, owner):
        statemap.FSMContext.__init__(self, Map.Disk)
        self._owner = owner

    def __getattr__(self, attrib):
        def trans_sm(*arglist):
            self._transition = attrib
            getattr(self.getState(), attrib)(self, *arglist)
            self._transition = None
        return trans_sm

    def enterStartState(self):
        self._state.Entry(self)

    def getOwner(self):
        return self._owner

# Local variables:
#  buffer-read-only: t
# End:
